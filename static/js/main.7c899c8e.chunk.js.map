{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setstate","React","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","pending","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"wSAceA,EAZH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACxB,OACC,yBAAKC,UAAU,kDACd,yBAAKC,IAAI,SAASC,IAAG,gCAA2BH,EAA3B,oBACrB,6BACC,gCAAMF,EAAN,KACA,+BAAKC,EAAL,QCeWK,EApBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OACC,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEVW,EAZG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC/B,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,iCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCACI,EARD,SAACC,GACd,OACC,yBAAKC,MAAQ,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UACjEJ,EAAMK,WCgBKC,E,kDAnBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACVC,UAAS,GAHO,E,8DAOAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACN,2CAEDG,KAAKX,MAAMK,a,GAhBQQ,IAAMC,WC6B5BC,G,wLAGJJ,KAAKX,MAAMgB,oB,+BAGF,IAAD,EACmDL,KAAKX,MAAxDiB,EADA,EACAA,YAAaC,EADb,EACaA,eAAgB9B,EAD7B,EAC6BA,OAAQ+B,EADrC,EACqCA,UACvCC,EAAiBhC,EAAOiC,QAAO,SAAAC,GACpC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASP,EAAYM,kBAGtD,OAAOJ,EACN,uCAEC,yBAAKnC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcuB,IACzB,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU9B,OAAQgC,W,GApBPN,cA4BHW,eAjDS,SAAClB,GACxB,MAAO,CAGNU,YAAaV,EAAMmB,aAAaT,YAChC7B,OAAQmB,EAAMoB,cAAcvC,OAC5B+B,UAAWZ,EAAMoB,cAAcC,QAC/BnB,MAAOF,EAAMoB,cAAclB,UAKF,SAACoB,GAC3B,MAAO,CACNX,eAAgB,SAACY,GAAD,OAAWD,ECfY,CACxCjC,KCTkC,sBDUlCmC,QDaoDD,EAAME,OAAOC,SAChEjB,gBAAiB,kBAAMa,GCRU,SAACA,GACnCA,EAAS,CAAEjC,KCf0B,2BDiBrCsC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAEjC,KClBY,yBDkBkBmC,QAASO,OAC/DC,OAAM,SAAA9B,GAAK,OAAIoB,EAAS,CAACjC,KClBU,wBDkBmBmC,QAAStB,cDoClDgB,CAA6CV,GG/CxCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAqB,CAC1B5B,YAAa,IAgBR6B,EAAqB,CAC1B3B,WAAW,EACX/B,OAAQ,GACRqB,MAAO,ICfFsC,G,MAASC,0BACTC,EAAcC,YAAgB,CAACxB,aDCT,WAA0C,IAAzCnB,EAAwC,uDAAlCsC,EAAoBM,EAAc,uDAAP,GAC7D,OAAOA,EAAOvD,MACb,IFfiC,sBEgBhC,OAAOwD,OAAOC,OAAO,GAAI9C,EAAO,CAACU,YAAakC,EAAOpB,UAEtD,QACC,OAAOxB,ICPyCoB,cDiBtB,WAA0C,IAAzCpB,EAAwC,uDAAlCuC,EAAoBK,EAAc,uDAAP,GAC9D,OAAOA,EAAOvD,MACb,IF7BoC,yBE8BnC,OAAOwD,OAAOC,OAAO,GAAI9C,EAAO,CAAEY,WAAW,IAC9C,IF9BoC,yBE+BnC,OAAOiC,OAAOC,OAAO,GAAI9C,EAAO,CAAEnB,OAAQ+D,EAAOpB,QAASZ,WAAW,IACtE,IF/BmC,wBEgClC,OAAOiC,OAAOC,OAAO,GAAI9C,EAAO,CAAEE,MAAO0C,EAAOpB,QAASZ,WAAW,IACrE,QACC,OAAOZ,MCzBJ+C,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAExEW,IAASC,OACR,kBAAC,IAAD,CAAUL,MAAOA,GAChB,kBAAC,EAAD,OAEDM,SAASC,eAAe,SF+GnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd3B,OAAM,SAAA9B,GACL0D,QAAQ1D,MAAMA,EAAM2D,c","file":"static/js/main.7c899c8e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({name,email,id}) =>{\r\n\treturn(\r\n\t\t<div className='bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/ ${id} ?size=100x100`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t<p> {email} </p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robots}) => {\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t    robots.map((user,i) =>{\r\n\t\t    \treturn (\r\n\t\t    \t\t<Card \r\n\t\t    \t\tkey={i} \r\n\t\t    \t\tid={robots[i].id} \r\n\t\t    \t\tname={robots[i].name} \r\n\t\t    \t\temail={robots[i].email}\r\n\t\t    \t\t/>\r\n\t\t    \t);\r\n\t\t    })\r\n\t\t}  \r\n\t    </div>\r\n\t);\r\n}\r\n      \r\nexport default CardList;","import React from 'react';\r\nimport CardList from './CardList';\r\n\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-light-green\" \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search robots'\r\n\t\t\t\tonChange={searchChange}/>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll =(props)=> {\r\n\treturn(\r\n\t\t<div style= {{overflowY:'scroll', border:'3px solid black', height:'600px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;\r\n\r\n\r\n/*Three types of components:- \r\n!> Props\r\n2> State\r\n3> Children */\r\n ","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\t\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info) {\r\n\t\tthis.setstate({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>OOps Error </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\t// aka state.searchField if only one reducer was in the store.\r\n\t\t// Comes from the reducer, which is from the store that is passed via Provider component.\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.pending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\n// Used to send actions. Flux pattern.\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t\t// Equivalent to requestRobots(dispatch) where requestRobots is expecting the dispatch function.\r\n\t}\r\n}\r\n\r\n// Syntax to be able to use state.\r\nclass App extends Component {\r\n\t// Constructor no longer needed now that state isn't stored in App component.\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\r\n\t\treturn isPending ?\r\n\t\t\t<h1>Loading</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n// Identify the type of action and storing the result from the action.\r\n// In this case, when user types in the box, that text is stored here.\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\n// Higher order function. A function that returns a function.\r\n// Redux doesn't understand a function that returns a function, since it's looking for an object.\r\n// Redux thunk is listening for actions that return functions, so the actions can be dispatched.\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}","  \r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\n// Initial states are read-only.\r\n// Therefore, as a user searches for a robot, the value of the text is stored in\r\n// a version of the initial state, thus changing the state.\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\t\t// Alt. way: {...state, {searchField: action.payload}}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk'; // Waits to see if an action returns a function instead of an object.\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}